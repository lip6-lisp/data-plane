*** /usr/src/sys/netinet/ip_input.c.orig	Fri Apr 22 16:55:20 2016
--- /usr/src/sys/netinet/ip_input.c	Fri Apr 22 17:40:39 2016
***************
*** 38,43 ****
--- 38,44 ----
  #include "opt_ipsec.h"
  #include "opt_kdtrace.h"
  #include "opt_route.h"
+ #include "opt_lisp.h"
  
  #include <sys/param.h>
  #include <sys/systm.h>
***************
*** 79,84 ****
--- 80,90 ----
  #include <netinet/ip_ipsec.h>
  #endif /* IPSEC */
  
+ #ifdef LISP
+ #include <net/lisp/lisp.h>
+ #include <net/lisp/maptables.h>
+ #include <netinet/lisp/ip_lisp.h>
+ #endif /* LISP */
  #include <sys/socketvar.h>
  
  #include <security/mac/mac_framework.h>
***************
*** 731,736 ****
--- 737,752 ----
  	 */
  	IPSTAT_INC(ips_delivered);
  
+ 	#ifdef LISP
+ 	if (lisp_ip_needdecap(&m)) {
+ 		/* GgX - We have a LISP packet.
+ 		 */
+ 		ip->ip_len = ntohs(ip->ip_len);
+ 		ip->ip_len -= hlen;
+ 		lisp_input(m, hlen);
+ 		return;
+ 	};
+ 	#endif /* LISP */
  	(*inetsw[ip_protox[ip->ip_p]].pr_input)(m, hlen);
  	return;
  bad:
***************
*** 1343,1354 ****
  ip_forward(struct mbuf *m, int srcrt)
  {
  	struct ip *ip = mtod(m, struct ip *);
! 	struct in_ifaddr *ia;
  	struct mbuf *mcopy;
  	struct sockaddr_in *sin;
  	struct in_addr dest;
  	struct route ro;
  	int error, type = 0, code = 0, mtu = 0;
  
  	if (m->m_flags & (M_BCAST|M_MCAST) || in_canforward(ip->ip_dst) == 0) {
  		IPSTAT_INC(ips_cantforward);
--- 1359,1377 ----
  ip_forward(struct mbuf *m, int srcrt)
  {
  	struct ip *ip = mtod(m, struct ip *);
! #ifdef LISP
! 	struct in_ifaddr *ia = NULL;
! #else
!         struct in_ifaddr *ia;
! #endif /* LISP */
  	struct mbuf *mcopy;
  	struct sockaddr_in *sin;
  	struct in_addr dest;
  	struct route ro;
  	int error, type = 0, code = 0, mtu = 0;
+ #ifdef LISP
+ 	int need_lisp_encap = 0;
+ #endif /* LISP */
  
  	if (m->m_flags & (M_BCAST|M_MCAST) || in_canforward(ip->ip_dst) == 0) {
  		IPSTAT_INC(ips_cantforward);
***************
*** 1366,1371 ****
--- 1389,1397 ----
  #ifdef IPSTEALTH
  	}
  #endif
+ #ifdef LISP
+ 	if ( !srcrt && !(need_lisp_encap = lisp_ip_needencap( &m )) ) {
+ #endif /* LISP */
  
  	bzero(&ro, sizeof(ro));
  	sin = (struct sockaddr_in *)&ro.ro_dst;
***************
*** 1396,1401 ****
--- 1422,1430 ----
  		return;
  	}
  #endif
+ #ifdef LISP
+ 	};
+ #endif /* LISP */
  
  	/*
  	 * Save the IP header and at most 8 bytes of the payload,
***************
*** 1447,1454 ****
  	 * or a route modified by a redirect.
  	 */
  	dest.s_addr = 0;
  	if (!srcrt && V_ipsendredirects &&
! 	    ia != NULL && ia->ia_ifp == m->m_pkthdr.rcvif) {
  		struct rtentry *rt;
  
  		rt = ro.ro_rt;
--- 1476,1488 ----
  	 * or a route modified by a redirect.
  	 */
  	dest.s_addr = 0;
+ #ifdef LISP
+ 	if (!srcrt && !need_lisp_encap && V_ipsendredirects &&
+ 		ia != NULL && ia->ia_ifp == m->m_pkthdr.rcvif) {
+ #else
  	if (!srcrt && V_ipsendredirects &&
! 		ia != NULL && ia->ia_ifp == m->m_pkthdr.rcvif) {
! #endif /* LISP */
  		struct rtentry *rt;
  
  		rt = ro.ro_rt;
