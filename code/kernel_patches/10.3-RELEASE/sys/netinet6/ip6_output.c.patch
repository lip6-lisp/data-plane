*** /usr/src/sys/netinet6/ip6_output.c.orig	Thu Apr 21 18:23:01 2016
--- /usr/src/sys/netinet6/ip6_output.c	Thu Apr 21 18:27:31 2016
***************
*** 69,74 ****
--- 69,75 ----
  #include "opt_ipsec.h"
  #include "opt_sctp.h"
  #include "opt_route.h"
+ #include "opt_lisp.h"

  #include <sys/param.h>
  #include <sys/kernel.h>
***************
*** 92,97 ****
--- 93,102 ----
  #include <net/vnet.h>

  #include <netinet/in.h>
+ #ifdef LISP
+ #include <netinet/in_systm.h>
+ #include <netinet/ip.h>
+ #endif /* LISP */
  #include <netinet/in_var.h>
  #include <netinet/ip_var.h>
  #include <netinet6/in6_var.h>
***************
*** 101,106 ****
--- 106,117 ----
  #include <netinet/in_pcb.h>
  #include <netinet/tcp_var.h>
  #include <netinet6/nd6.h>
+ #ifdef LISP
+ #include <net/lisp/lisp.h>
+ #include <net/lisp/maptables.h>
+
+ #include <netinet6/lisp6/ip6_lisp6.h>
+ #endif /* LISP */

  #ifdef IPSEC
  #include <netipsec/ipsec.h>
***************
*** 310,315 ****
--- 321,331 ----
  	struct m_tag *fwd_tag = NULL;
  	uint32_t id;

+ #ifdef LISP
+ 	struct eidmap *  local_map = NULL;
+ 	struct eidmap *  remote_map = NULL;
+ #endif /* LISP */
+
  	ip6 = mtod(m, struct ip6_hdr *);
  	if (ip6 == NULL) {
  		printf ("ip6 is NULL");
***************
*** 479,485 ****
  	}

  	IP6STAT_INC(ip6s_localout);
!
  	/*
  	 * Route packet.
  	 */
--- 495,524 ----
  	}

  	IP6STAT_INC(ip6s_localout);
! #ifdef LISP
!      /*  GgX - Before perform normal routing check if we have to
!       *  perform LISP encap.
!       *  If no encapsulation is possible we continue with
!       * "traditional" operation (kind of fall-back
!       * approach.
!      */
!
!      hlen = sizeof(struct ip6_hdr); /* XXX - Be sure hlen is initialized */
!
!      if ( ((error = lisp_ip6_mapencap( &m, flags, &local_map,
!                &remote_map)) == 0)
!                && local_map ) {
!
!  		error = lisp6_output(m, hlen, local_map, remote_map);
!  		goto done;
!
!      } else if (error) {
!
!          goto bad;
!
!      };
! #endif /* LISP */
!
  	/*
  	 * Route packet.
  	 */
