*** /usr/src/sys/netinet/ip_input.c.orig	Mon Mar 24 19:11:00 2014
--- /usr/src/sys/netinet/ip_input.c	Wed Mar 26 17:17:00 2014
***************
*** 38,43 ****
--- 38,44 ----
  #include "opt_ipsec.h"
  #include "opt_kdtrace.h"
  #include "opt_route.h"
+ #include "opt_lisp.h"
  
  #include <sys/param.h>
  #include <sys/systm.h>
***************
*** 80,85 ****
--- 81,93 ----
  #include <netinet/ip_ipsec.h>
  #endif /* IPSEC */
  
+ #ifdef LISP
+ #include <net/lisp/lisp.h>
+ #include <net/lisp/maptables.h>
+   
+ #include <netinet/lisp/ip_lisp.h>
+ #endif /* LISP */
+ 
  #include <sys/socketvar.h>
  
  #include <security/mac/mac_framework.h>
***************
*** 758,764 ****
  	 * Switch out to protocol's input routine.
  	 */
  	IPSTAT_INC(ips_delivered);
! 
  	(*inetsw[ip_protox[ip->ip_p]].pr_input)(m, hlen);
  	return;
  bad:
--- 766,784 ----
  	 * Switch out to protocol's input routine.
  	 */
  	IPSTAT_INC(ips_delivered);
! 	
! 	#ifdef LISP
!          if (lisp_ip_needdecap(&m)) {
!                  /* GgX - We have a LISP packet. 
!                   */
! 			ip->ip_len = ntohs(ip->ip_len);
! 			ip->ip_len -= hlen;				
!                   lisp_input(m, hlen);
!                   return;
!    
!          };
! 	#endif /* LISP */
!  
  	(*inetsw[ip_protox[ip->ip_p]].pr_input)(m, hlen);
  	return;
  bad:
***************
*** 1368,1378 ****
  ip_forward(struct mbuf *m, int srcrt)
  {
  	struct ip *ip = mtod(m, struct ip *);
! 	struct in_ifaddr *ia;
  	struct mbuf *mcopy;
  	struct in_addr dest;
  	struct route ro;
  	int error, type = 0, code = 0, mtu = 0;
  
  	if (m->m_flags & (M_BCAST|M_MCAST) || in_canforward(ip->ip_dst) == 0) {
  		IPSTAT_INC(ips_cantforward);
--- 1388,1405 ----
  ip_forward(struct mbuf *m, int srcrt)
  {
  	struct ip *ip = mtod(m, struct ip *);
! #ifdef LISP
!     struct in_ifaddr *ia = NULL;
! #else
!     struct in_ifaddr *ia;
! #endif /* LISP */	
  	struct mbuf *mcopy;
  	struct in_addr dest;
  	struct route ro;
  	int error, type = 0, code = 0, mtu = 0;
+ #ifdef LISP
+     int need_lisp_encap = 0;
+ #endif /* LISP */
  
  	if (m->m_flags & (M_BCAST|M_MCAST) || in_canforward(ip->ip_dst) == 0) {
  		IPSTAT_INC(ips_cantforward);
***************
*** 1390,1409 ****
  #ifdef IPSTEALTH
  	}
  #endif
! 
! 	ia = ip_rtaddr(ip->ip_dst, M_GETFIB(m));
  #ifndef IPSEC
! 	/*
! 	 * 'ia' may be NULL if there is no route for this destination.
! 	 * In case of IPsec, Don't discard it just yet, but pass it to
! 	 * ip_output in case of outgoing IPsec policy.
! 	 */
! 	if (!srcrt && ia == NULL) {
! 		icmp_error(m, ICMP_UNREACH, ICMP_UNREACH_HOST, 0, 0);
! 		return;
! 	}
  #endif
! 
  	/*
  	 * Save the IP header and at most 8 bytes of the payload,
  	 * in case we need to generate an ICMP message to the src.
--- 1417,1442 ----
  #ifdef IPSTEALTH
  	}
  #endif
! #ifdef LISP
!     if ( !srcrt && !(need_lisp_encap = lisp_ip_needencap( &m )) ) {
! #endif /* LISP */
!  
! 		ia = ip_rtaddr(ip->ip_dst, M_GETFIB(m));
  #ifndef IPSEC
! 		/*
! 		 * 'ia' may be NULL if there is no route for this destination.
! 		 * In case of IPsec, Don't discard it just yet, but pass it to
! 		 * ip_output in case of outgoing IPsec policy.
! 		 */
! 		if (!srcrt && ia == NULL) {
! 			icmp_error(m, ICMP_UNREACH, ICMP_UNREACH_HOST, 0, 0);
! 			return;
! 		}
  #endif
! #ifdef LISP
!     };
! #endif /* LISP */
!  
  	/*
  	 * Save the IP header and at most 8 bytes of the payload,
  	 * in case we need to generate an ICMP message to the src.
***************
*** 1454,1461 ****
--- 1487,1499 ----
  	 * or a route modified by a redirect.
  	 */
  	dest.s_addr = 0;
+ #ifdef LISP
+     if (!srcrt && !need_lisp_encap && V_ipsendredirects &&
+         ia != NULL && ia->ia_ifp == m->m_pkthdr.rcvif) {
+ #else
  	if (!srcrt && V_ipsendredirects &&
  	    ia != NULL && ia->ia_ifp == m->m_pkthdr.rcvif) {
+ #endif /* LISP */		
  		struct sockaddr_in *sin;
  		struct rtentry *rt;
  
